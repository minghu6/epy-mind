%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.1.8
-module(python_shell_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type eval_request() ::
      #{exec                    => iodata(),        % = 1
        eval                    => iodata()         % = 2
       }.
-type string_value() ::
      #{value                   => iodata()         % = 1
       }.
-export_type(['eval_request'/0, 'string_value'/0]).

-spec encode_msg(eval_request() | string_value(),eval_request | string_value) -> binary().
encode_msg(Msg, MsgName) ->
    encode_msg(Msg, MsgName, []).


-spec encode_msg(eval_request() | string_value(),eval_request | string_value, list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      eval_request -> e_msg_eval_request(Msg, TrUserData);
      string_value -> e_msg_string_value(Msg, TrUserData)
    end.



e_msg_eval_request(Msg, TrUserData) ->
    e_msg_eval_request(Msg, <<>>, TrUserData).


e_msg_eval_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{exec := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{eval := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false -> e_type_string(TrF2, <<B1/binary, 18>>)
	    end
	  end;
      _ -> B1
    end.

e_msg_string_value(Msg, TrUserData) ->
    e_msg_string_value(Msg, <<>>, TrUserData).


e_msg_string_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    case is_empty_string(TrF1) of
	      true -> Bin;
	      false -> e_type_string(TrF1, <<Bin/binary, 10>>)
	    end
	  end;
      _ -> Bin
    end.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
-ifdef('GPB_FUNCTION_STACK').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

-endif.

decode_msg_2_doit(eval_request, Bin, TrUserData) ->
    d_msg_eval_request(Bin, TrUserData);
decode_msg_2_doit(string_value, Bin, TrUserData) ->
    d_msg_string_value(Bin, TrUserData).



d_msg_eval_request(Bin, TrUserData) ->
    dfp_read_field_def_eval_request(Bin, 0, 0,
				    id(<<>>, TrUserData), id(<<>>, TrUserData),
				    TrUserData).

dfp_read_field_def_eval_request(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_eval_request_exec(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_eval_request(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_eval_request_eval(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_eval_request(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{exec => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{eval => F@_2}
    end;
dfp_read_field_def_eval_request(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_eval_request(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_eval_request(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_eval_request(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_eval_request(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_eval_request_exec(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      18 ->
	  d_field_eval_request_eval(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_eval_request(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_eval_request(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_eval_request(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_eval_request(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_eval_request(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_eval_request(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{exec => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{eval => F@_2}
    end.

d_field_eval_request_exec(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_eval_request_exec(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_eval_request_exec(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_eval_request(RestF, 0, 0, NewFValue,
				    F@_2, TrUserData).

d_field_eval_request_eval(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_eval_request_eval(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_eval_request_eval(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_eval_request(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_eval_request(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_eval_request(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_eval_request(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_eval_request(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_eval_request(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_eval_request(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_eval_request(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_eval_request(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_eval_request(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_eval_request(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_eval_request(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_eval_request(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_eval_request(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_eval_request(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

d_msg_string_value(Bin, TrUserData) ->
    dfp_read_field_def_string_value(Bin, 0, 0,
				    id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_string_value(<<10, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_string_value_value(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_string_value(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{value => F@_1}
    end;
dfp_read_field_def_string_value(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_string_value(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_string_value(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_string_value(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_string_value(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_string_value_value(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_string_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_string_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_string_value(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_string_value(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_string_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_string_value(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{value => F@_1}
    end.

d_field_string_value_value(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_string_value_value(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_string_value_value(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_string_value(RestF, 0, 0, NewFValue,
				    TrUserData).

skip_varint_string_value(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_string_value(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_string_value(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_string_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_string_value(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_string_value(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_string_value(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_string_value(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_string_value(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_string_value(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_string_value(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_string_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_string_value(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_string_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      eval_request ->
	  merge_msg_eval_request(Prev, New, TrUserData);
      string_value ->
	  merge_msg_string_value(Prev, New, TrUserData)
    end.

merge_msg_eval_request(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{exec := NFexec}} -> S1#{exec => NFexec};
	   {#{exec := PFexec}, _} -> S1#{exec => PFexec};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{eval := NFeval}} -> S2#{eval => NFeval};
      {#{eval := PFeval}, _} -> S2#{eval => PFeval};
      _ -> S2
    end.

merge_msg_string_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.


verify_msg(Msg, MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      eval_request ->
	  v_msg_eval_request(Msg, [eval_request], TrUserData);
      string_value ->
	  v_msg_string_value(Msg, [string_value], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_eval_request/3}).
v_msg_eval_request(#{} = M, Path, _) ->
    case M of
      #{exec := F1} -> v_type_string(F1, [exec | Path]);
      _ -> ok
    end,
    case M of
      #{eval := F2} -> v_type_string(F2, [eval | Path]);
      _ -> ok
    end,
    lists:foreach(fun (exec) -> ok;
		      (eval) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_eval_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   eval_request},
		  M, Path);
v_msg_eval_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, eval_request}, X, Path).

-dialyzer({nowarn_function,v_msg_string_value/3}).
v_msg_string_value(#{} = M, Path, _) ->
    case M of
      #{value := F1} -> v_type_string(F1, [value | Path]);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_string_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   string_value},
		  M, Path);
v_msg_string_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, string_value}, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.


get_msg_defs() ->
    [{{msg, eval_request},
      [#{name => exec, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => eval, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, string_value},
      [#{name => value, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []}]}].


get_msg_names() -> [eval_request, string_value].


get_group_names() -> [].


get_msg_or_group_names() ->
    [eval_request, string_value].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(eval_request) ->
    [#{name => exec, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => eval, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def(string_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> ['python_shell.PythonShell'].


get_service_def('python_shell.PythonShell') ->
    {{service, 'python_shell.PythonShell'},
     [#{name => 'Eval', input => eval_request,
	output => string_value, input_stream => false,
	output_stream => false, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('python_shell.PythonShell') -> ['Eval'];
get_rpc_names(_) -> error.


find_rpc_def('python_shell.PythonShell', RpcName) ->
    'find_rpc_def_python_shell.PythonShell'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_python_shell.PythonShell'('Eval') ->
    #{name => 'Eval', input => eval_request,
      output => string_value, input_stream => false,
      output_stream => false, opts => []};
'find_rpc_def_python_shell.PythonShell'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
      Def when is_map(Def) -> Def;
      error ->
	  erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


get_package_name() -> python_shell.



gpb_version_as_string() ->
    "4.1.8".

gpb_version_as_list() ->
    [4,1,8].
