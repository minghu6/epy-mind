%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.1.8
-module(matrix_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type matrix() ::
      #{col                     => integer(),       % = 1, 32 bits
        row                     => integer(),       % = 2, 32 bits
        e                       => [integer()]      % = 3, 32 bits
       }.
-type operator() ::
      #{value                   => iodata(),        % = 1
        factor_num              => integer()        % = 2, 32 bits
       }.
-type matrix_op_request() ::
      #{matrixs                 => [matrix()],      % = 1
        op                      => operator()       % = 2
       }.
-type matrix_list() ::
      #{matrixs                 => [matrix()]       % = 1
       }.
-export_type(['matrix'/0, 'operator'/0, 'matrix_op_request'/0, 'matrix_list'/0]).

-spec encode_msg(matrix() | operator() | matrix_op_request() | matrix_list(),matrix | operator | matrix_op_request | matrix_list) -> binary().
encode_msg(Msg, MsgName) ->
    encode_msg(Msg, MsgName, []).


-spec encode_msg(matrix() | operator() | matrix_op_request() | matrix_list(),matrix | operator | matrix_op_request | matrix_list, list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      matrix -> e_msg_matrix(Msg, TrUserData);
      operator -> e_msg_operator(Msg, TrUserData);
      matrix_op_request ->
	  e_msg_matrix_op_request(Msg, TrUserData);
      matrix_list -> e_msg_matrix_list(Msg, TrUserData)
    end.



e_msg_matrix(Msg, TrUserData) ->
    e_msg_matrix(Msg, <<>>, TrUserData).


e_msg_matrix(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{col := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{row := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true -> e_type_int32(TrF2, <<B1/binary, 16>>)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{e := F3} ->
	  TrF3 = id(F3, TrUserData),
	  if TrF3 == [] -> B2;
	     true -> e_field_matrix_e(TrF3, B2, TrUserData)
	  end;
      _ -> B2
    end.

e_msg_operator(Msg, TrUserData) ->
    e_msg_operator(Msg, <<>>, TrUserData).


e_msg_operator(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{value := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{factor_num := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true -> e_type_int32(TrF2, <<B1/binary, 16>>)
	    end
	  end;
      _ -> B1
    end.

e_msg_matrix_op_request(Msg, TrUserData) ->
    e_msg_matrix_op_request(Msg, <<>>, TrUserData).


e_msg_matrix_op_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{matrixs := F1} ->
	       TrF1 = id(F1, TrUserData),
	       if TrF1 == [] -> Bin;
		  true ->
		      e_field_matrix_op_request_matrixs(TrF1, Bin, TrUserData)
	       end;
	   _ -> Bin
	 end,
    case M of
      #{op := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true ->
		   e_mfield_matrix_op_request_op(TrF2, <<B1/binary, 18>>,
						 TrUserData)
	    end
	  end;
      _ -> B1
    end.

e_msg_matrix_list(Msg, TrUserData) ->
    e_msg_matrix_list(Msg, <<>>, TrUserData).


e_msg_matrix_list(#{} = M, Bin, TrUserData) ->
    case M of
      #{matrixs := F1} ->
	  TrF1 = id(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true ->
		 e_field_matrix_list_matrixs(TrF1, Bin, TrUserData)
	  end;
      _ -> Bin
    end.

e_field_matrix_e(Elems, Bin, TrUserData)
    when Elems =/= [] ->
    SubBin = e_pfield_matrix_e(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_matrix_e([], Bin, _TrUserData) -> Bin.

e_pfield_matrix_e([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_type_int32(id(Value, TrUserData), Bin),
    e_pfield_matrix_e(Rest, Bin2, TrUserData);
e_pfield_matrix_e([], Bin, _TrUserData) -> Bin.

e_mfield_matrix_op_request_matrixs(Msg, Bin,
				   TrUserData) ->
    SubBin = e_msg_matrix(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_matrix_op_request_matrixs([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_matrix_op_request_matrixs(id(Elem,
						 TrUserData),
					      Bin2, TrUserData),
    e_field_matrix_op_request_matrixs(Rest, Bin3,
				      TrUserData);
e_field_matrix_op_request_matrixs([], Bin,
				  _TrUserData) ->
    Bin.

e_mfield_matrix_op_request_op(Msg, Bin, TrUserData) ->
    SubBin = e_msg_operator(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_matrix_list_matrixs(Msg, Bin, TrUserData) ->
    SubBin = e_msg_matrix(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_matrix_list_matrixs([Elem | Rest], Bin,
			    TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_matrix_list_matrixs(id(Elem,
					   TrUserData),
					Bin2, TrUserData),
    e_field_matrix_list_matrixs(Rest, Bin3, TrUserData);
e_field_matrix_list_matrixs([], Bin, _TrUserData) ->
    Bin.

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
-ifdef('GPB_FUNCTION_STACK').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

-endif.

decode_msg_2_doit(matrix, Bin, TrUserData) ->
    d_msg_matrix(Bin, TrUserData);
decode_msg_2_doit(operator, Bin, TrUserData) ->
    d_msg_operator(Bin, TrUserData);
decode_msg_2_doit(matrix_op_request, Bin, TrUserData) ->
    d_msg_matrix_op_request(Bin, TrUserData);
decode_msg_2_doit(matrix_list, Bin, TrUserData) ->
    d_msg_matrix_list(Bin, TrUserData).



d_msg_matrix(Bin, TrUserData) ->
    dfp_read_field_def_matrix(Bin, 0, 0, id(0, TrUserData),
			      id(0, TrUserData), id([], TrUserData),
			      TrUserData).

dfp_read_field_def_matrix(<<8, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_matrix_col(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData);
dfp_read_field_def_matrix(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_matrix_row(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData);
dfp_read_field_def_matrix(<<26, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_pfield_matrix_e(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		      TrUserData);
dfp_read_field_def_matrix(<<24, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_matrix_e(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		     TrUserData);
dfp_read_field_def_matrix(<<>>, 0, 0, F@_1, F@_2, R1,
			  TrUserData) ->
    S1 = #{e => lists_reverse(R1, TrUserData)},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{col => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{row => F@_2}
    end;
dfp_read_field_def_matrix(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, TrUserData) ->
    dg_read_field_def_matrix(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, TrUserData).

dg_read_field_def_matrix(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_matrix(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_matrix(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_matrix_col(Rest, 0, 0, F@_1, F@_2, F@_3,
			     TrUserData);
      16 ->
	  d_field_matrix_row(Rest, 0, 0, F@_1, F@_2, F@_3,
			     TrUserData);
      26 ->
	  d_pfield_matrix_e(Rest, 0, 0, F@_1, F@_2, F@_3,
			    TrUserData);
      24 ->
	  d_field_matrix_e(Rest, 0, 0, F@_1, F@_2, F@_3,
			   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_matrix(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    1 ->
		skip_64_matrix(Rest, 0, 0, F@_1, F@_2, F@_3,
			       TrUserData);
	    2 ->
		skip_length_delimited_matrix(Rest, 0, 0, F@_1, F@_2,
					     F@_3, TrUserData);
	    3 ->
		skip_group_matrix(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  TrUserData);
	    5 ->
		skip_32_matrix(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_matrix(<<>>, 0, 0, F@_1, F@_2, R1,
			 TrUserData) ->
    S1 = #{e => lists_reverse(R1, TrUserData)},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{col => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{row => F@_2}
    end.

d_field_matrix_col(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_matrix_col(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, TrUserData);
d_field_matrix_col(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_matrix(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, TrUserData).

d_field_matrix_row(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_matrix_row(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, TrUserData);
d_field_matrix_row(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_matrix(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, TrUserData).

d_field_matrix_e(<<1:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_matrix_e(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		     F@_3, TrUserData);
d_field_matrix_e(<<0:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_matrix(RestF, 0, 0, F@_1, F@_2,
			      cons(NewFValue, Prev, TrUserData), TrUserData).

d_pfield_matrix_e(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_pfield_matrix_e(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, TrUserData);
d_pfield_matrix_e(<<0:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_matrix_e(PackedBytes, 0, 0, E),
    dfp_read_field_def_matrix(Rest2, 0, 0, F@_1, F@_2,
			      NewSeq, TrUserData).

d_packed_field_matrix_e(<<1:1, X:7, Rest/binary>>, N,
			Acc, AccSeq)
    when N < 57 ->
    d_packed_field_matrix_e(Rest, N + 7, X bsl N + Acc,
			    AccSeq);
d_packed_field_matrix_e(<<0:1, X:7, Rest/binary>>, N,
			Acc, AccSeq) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    d_packed_field_matrix_e(RestF, 0, 0,
			    [NewFValue | AccSeq]);
d_packed_field_matrix_e(<<>>, 0, 0, AccSeq) -> AccSeq.

skip_varint_matrix(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_matrix(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData);
skip_varint_matrix(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_matrix(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

skip_length_delimited_matrix(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_matrix(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_matrix(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_matrix(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      TrUserData).

skip_group_matrix(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_matrix(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      TrUserData).

skip_32_matrix(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_matrix(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

skip_64_matrix(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_matrix(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

d_msg_operator(Bin, TrUserData) ->
    dfp_read_field_def_operator(Bin, 0, 0,
				id(<<>>, TrUserData), id(0, TrUserData),
				TrUserData).

dfp_read_field_def_operator(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_operator_value(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_operator(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_operator_factor_num(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_operator(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{value => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{factor_num => F@_2}
    end;
dfp_read_field_def_operator(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_operator(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_operator(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_operator(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_operator(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_operator_value(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      16 ->
	  d_field_operator_factor_num(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_operator(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_operator(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_operator(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_operator(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_operator(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_operator(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{value => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{factor_num => F@_2}
    end.

d_field_operator_value(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_operator_value(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_operator_value(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_operator(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_operator_factor_num(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_operator_factor_num(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_operator_factor_num(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_operator(RestF, 0, 0, F@_1,
				NewFValue, TrUserData).

skip_varint_operator(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_operator(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_operator(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_operator(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_operator(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_operator(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_operator(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_operator(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_operator(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_operator(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_operator(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_operator(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_operator(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_operator(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

d_msg_matrix_op_request(Bin, TrUserData) ->
    dfp_read_field_def_matrix_op_request(Bin, 0, 0,
					 id([], TrUserData),
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_matrix_op_request(<<10,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_matrix_op_request_matrixs(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_matrix_op_request(<<18,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_matrix_op_request_op(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_matrix_op_request(<<>>, 0, 0, R1,
				     F@_2, TrUserData) ->
    S1 = #{matrixs => lists_reverse(R1, TrUserData)},
    if F@_2 == '$undef' -> S1;
       true -> S1#{op => F@_2}
    end;
dfp_read_field_def_matrix_op_request(Other, Z1, Z2,
				     F@_1, F@_2, TrUserData) ->
    dg_read_field_def_matrix_op_request(Other, Z1, Z2, F@_1,
					F@_2, TrUserData).

dg_read_field_def_matrix_op_request(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_matrix_op_request(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_matrix_op_request(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_matrix_op_request_matrixs(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      18 ->
	  d_field_matrix_op_request_op(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_matrix_op_request(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    1 ->
		skip_64_matrix_op_request(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    2 ->
		skip_length_delimited_matrix_op_request(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    3 ->
		skip_group_matrix_op_request(Rest, Key bsr 3, 0, F@_1,
					     F@_2, TrUserData);
	    5 ->
		skip_32_matrix_op_request(Rest, 0, 0, F@_1, F@_2,
					  TrUserData)
	  end
    end;
dg_read_field_def_matrix_op_request(<<>>, 0, 0, R1,
				    F@_2, TrUserData) ->
    S1 = #{matrixs => lists_reverse(R1, TrUserData)},
    if F@_2 == '$undef' -> S1;
       true -> S1#{op => F@_2}
    end.

d_field_matrix_op_request_matrixs(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_matrix_op_request_matrixs(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_matrix_op_request_matrixs(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_matrix(Bs, TrUserData), TrUserData), Rest2}
			 end,
    dfp_read_field_def_matrix_op_request(RestF, 0, 0,
					 cons(NewFValue, Prev, TrUserData),
					 F@_2, TrUserData).

d_field_matrix_op_request_op(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_matrix_op_request_op(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_matrix_op_request_op(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_operator(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_matrix_op_request(RestF, 0, 0, F@_1,
					 if Prev == '$undef' -> NewFValue;
					    true ->
						merge_msg_operator(Prev,
								   NewFValue,
								   TrUserData)
					 end,
					 TrUserData).

skip_varint_matrix_op_request(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_matrix_op_request(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
skip_varint_matrix_op_request(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_matrix_op_request(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_length_delimited_matrix_op_request(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_matrix_op_request(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
skip_length_delimited_matrix_op_request(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_matrix_op_request(Rest2, 0, 0, F@_1,
					 F@_2, TrUserData).

skip_group_matrix_op_request(Bin, FNum, Z2, F@_1, F@_2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_matrix_op_request(Rest, 0, Z2, F@_1,
					 F@_2, TrUserData).

skip_32_matrix_op_request(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_matrix_op_request(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_64_matrix_op_request(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_matrix_op_request(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

d_msg_matrix_list(Bin, TrUserData) ->
    dfp_read_field_def_matrix_list(Bin, 0, 0,
				   id([], TrUserData), TrUserData).

dfp_read_field_def_matrix_list(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_matrix_list_matrixs(Rest, Z1, Z2, F@_1,
				TrUserData);
dfp_read_field_def_matrix_list(<<>>, 0, 0, R1,
			       TrUserData) ->
    #{matrixs => lists_reverse(R1, TrUserData)};
dfp_read_field_def_matrix_list(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_matrix_list(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_matrix_list(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_matrix_list(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_matrix_list(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_matrix_list_matrixs(Rest, 0, 0, F@_1,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_matrix_list(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_matrix_list(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_matrix_list(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_matrix_list(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_matrix_list(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_matrix_list(<<>>, 0, 0, R1,
			      TrUserData) ->
    #{matrixs => lists_reverse(R1, TrUserData)}.

d_field_matrix_list_matrixs(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_matrix_list_matrixs(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
d_field_matrix_list_matrixs(<<0:1, X:7, Rest/binary>>,
			    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_matrix(Bs, TrUserData), TrUserData), Rest2}
			 end,
    dfp_read_field_def_matrix_list(RestF, 0, 0,
				   cons(NewFValue, Prev, TrUserData),
				   TrUserData).

skip_varint_matrix_list(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_matrix_list(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_matrix_list(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_matrix_list(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_matrix_list(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_matrix_list(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_matrix_list(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_matrix_list(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_matrix_list(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_matrix_list(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_matrix_list(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_matrix_list(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_matrix_list(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_matrix_list(Rest, Z1, Z2, F@_1,
				   TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      matrix -> merge_msg_matrix(Prev, New, TrUserData);
      operator -> merge_msg_operator(Prev, New, TrUserData);
      matrix_op_request ->
	  merge_msg_matrix_op_request(Prev, New, TrUserData);
      matrix_list ->
	  merge_msg_matrix_list(Prev, New, TrUserData)
    end.

merge_msg_matrix(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{col := NFcol}} -> S1#{col => NFcol};
	   {#{col := PFcol}, _} -> S1#{col => PFcol};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{row := NFrow}} -> S2#{row => NFrow};
	   {#{row := PFrow}, _} -> S2#{row => PFrow};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {#{e := PFe}, #{e := NFe}} ->
	  S3#{e => 'erlang_++'(PFe, NFe, TrUserData)};
      {_, #{e := NFe}} -> S3#{e => NFe};
      {#{e := PFe}, _} -> S3#{e => PFe};
      {_, _} -> S3
    end.

merge_msg_operator(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{value := NFvalue}} -> S1#{value => NFvalue};
	   {#{value := PFvalue}, _} -> S1#{value => PFvalue};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{factor_num := NFfactor_num}} ->
	  S2#{factor_num => NFfactor_num};
      {#{factor_num := PFfactor_num}, _} ->
	  S2#{factor_num => PFfactor_num};
      _ -> S2
    end.

merge_msg_matrix_op_request(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{matrixs := PFmatrixs}, #{matrixs := NFmatrixs}} ->
	       S1#{matrixs =>
		       'erlang_++'(PFmatrixs, NFmatrixs, TrUserData)};
	   {_, #{matrixs := NFmatrixs}} ->
	       S1#{matrixs => NFmatrixs};
	   {#{matrixs := PFmatrixs}, _} ->
	       S1#{matrixs => PFmatrixs};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{op := PFop}, #{op := NFop}} ->
	  S2#{op => merge_msg_operator(PFop, NFop, TrUserData)};
      {_, #{op := NFop}} -> S2#{op => NFop};
      {#{op := PFop}, _} -> S2#{op => PFop};
      {_, _} -> S2
    end.

merge_msg_matrix_list(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{matrixs := PFmatrixs}, #{matrixs := NFmatrixs}} ->
	  S1#{matrixs =>
		  'erlang_++'(PFmatrixs, NFmatrixs, TrUserData)};
      {_, #{matrixs := NFmatrixs}} ->
	  S1#{matrixs => NFmatrixs};
      {#{matrixs := PFmatrixs}, _} ->
	  S1#{matrixs => PFmatrixs};
      {_, _} -> S1
    end.


verify_msg(Msg, MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      matrix -> v_msg_matrix(Msg, [matrix], TrUserData);
      operator -> v_msg_operator(Msg, [operator], TrUserData);
      matrix_op_request ->
	  v_msg_matrix_op_request(Msg, [matrix_op_request],
				  TrUserData);
      matrix_list ->
	  v_msg_matrix_list(Msg, [matrix_list], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_matrix/3}).
v_msg_matrix(#{} = M, Path, _) ->
    case M of
      #{col := F1} -> v_type_int32(F1, [col | Path]);
      _ -> ok
    end,
    case M of
      #{row := F2} -> v_type_int32(F2, [row | Path]);
      _ -> ok
    end,
    case M of
      #{e := F3} ->
	  if is_list(F3) ->
		 _ = [v_type_int32(Elem, [e | Path]) || Elem <- F3], ok;
	     true ->
		 mk_type_error({invalid_list_of, int32}, F3, [e | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (col) -> ok;
		      (row) -> ok;
		      (e) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_matrix(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   matrix},
		  M, Path);
v_msg_matrix(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, matrix}, X, Path).

-dialyzer({nowarn_function,v_msg_operator/3}).
v_msg_operator(#{} = M, Path, _) ->
    case M of
      #{value := F1} -> v_type_string(F1, [value | Path]);
      _ -> ok
    end,
    case M of
      #{factor_num := F2} ->
	  v_type_int32(F2, [factor_num | Path]);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (factor_num) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_operator(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   operator},
		  M, Path);
v_msg_operator(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, operator}, X, Path).

-dialyzer({nowarn_function,v_msg_matrix_op_request/3}).
v_msg_matrix_op_request(#{} = M, Path, TrUserData) ->
    case M of
      #{matrixs := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_matrix(Elem, [matrixs | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, matrix}}, F1,
			       [matrixs | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{op := F2} ->
	  v_msg_operator(F2, [op | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (matrixs) -> ok;
		      (op) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_matrix_op_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   matrix_op_request},
		  M, Path);
v_msg_matrix_op_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, matrix_op_request}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_matrix_list/3}).
v_msg_matrix_list(#{} = M, Path, TrUserData) ->
    case M of
      #{matrixs := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_matrix(Elem, [matrixs | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, matrix}}, F1,
			       [matrixs | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (matrixs) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_matrix_list(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   matrix_list},
		  M, Path);
v_msg_matrix_list(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, matrix_list}, X, Path).

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, matrix},
      [#{name => col, fnum => 1, rnum => 2, type => int32,
	 occurrence => optional, opts => []},
       #{name => row, fnum => 2, rnum => 3, type => int32,
	 occurrence => optional, opts => []},
       #{name => e, fnum => 3, rnum => 4, type => int32,
	 occurrence => repeated, opts => [packed]}]},
     {{msg, operator},
      [#{name => value, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => factor_num, fnum => 2, rnum => 3,
	 type => int32, occurrence => optional, opts => []}]},
     {{msg, matrix_op_request},
      [#{name => matrixs, fnum => 1, rnum => 2,
	 type => {msg, matrix}, occurrence => repeated,
	 opts => []},
       #{name => op, fnum => 2, rnum => 3,
	 type => {msg, operator}, occurrence => optional,
	 opts => []}]},
     {{msg, matrix_list},
      [#{name => matrixs, fnum => 1, rnum => 2,
	 type => {msg, matrix}, occurrence => repeated,
	 opts => []}]}].


get_msg_names() ->
    [matrix, operator, matrix_op_request, matrix_list].


get_group_names() -> [].


get_msg_or_group_names() ->
    [matrix, operator, matrix_op_request, matrix_list].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(matrix) ->
    [#{name => col, fnum => 1, rnum => 2, type => int32,
       occurrence => optional, opts => []},
     #{name => row, fnum => 2, rnum => 3, type => int32,
       occurrence => optional, opts => []},
     #{name => e, fnum => 3, rnum => 4, type => int32,
       occurrence => repeated, opts => [packed]}];
find_msg_def(operator) ->
    [#{name => value, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => factor_num, fnum => 2, rnum => 3,
       type => int32, occurrence => optional, opts => []}];
find_msg_def(matrix_op_request) ->
    [#{name => matrixs, fnum => 1, rnum => 2,
       type => {msg, matrix}, occurrence => repeated,
       opts => []},
     #{name => op, fnum => 2, rnum => 3,
       type => {msg, operator}, occurrence => optional,
       opts => []}];
find_msg_def(matrix_list) ->
    [#{name => matrixs, fnum => 1, rnum => 2,
       type => {msg, matrix}, occurrence => repeated,
       opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> matrix.



gpb_version_as_string() ->
    "4.1.8".

gpb_version_as_list() ->
    [4,1,8].
